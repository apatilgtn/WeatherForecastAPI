name: Apigee Deployment Pipeline

trigger: none

parameters:
  - name: proxyName
    type: string
    displayName: 'API Proxy Name'
    default: ''
  - name: proxyDirectory
    type: string
    displayName: 'Proxy Directory'
    default: 'apiproxy'
  - name: environmentGroup
    type: string
    displayName: 'Environment Group'
    default: 'default'
    values:
      - 'default'
      - 'edd'
      - 'homerun'
      - 'wow'
      - 'wpay'
  - name: environmentType
    type: string
    displayName: 'Environment Type'
    default: 'test-env'
    values:
      - 'dev'
      - 'test-env'
      - 'test'
      - 'uat'
      - 'prod'
  - name: isProduction
    type: boolean
    displayName: 'Is Production Deployment?'
    default: false

variables:
  - group: apigeeX # Contains APIGEE_ORG, APIGEE_ORG_PROD, GCP_PROJECT_ID
  - name: versionId
    value: '$(Build.BuildId)-$(Build.SourceVersion)'

resources:
  repositories:
    - repository: self
      type: git
      name: $(Build.Repository.Name)

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Validate
    displayName: 'Validate Inputs'
    jobs:
      - job: ValidateInputs
        steps:
          - task: Bash@3
            name: validateConfig
            displayName: 'Validate Configuration'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîç Validating Configuration"
                
                PROCEED=true
                DEPLOY_TYPE="non-prod"
                STATUS="pending"
                
                if [[ "${{ parameters.isProduction }}" == "true" ]]; then
                  DEPLOY_TYPE="prod"
                fi
                
                case "${{ parameters.environmentGroup }}" in
                  "default"|"edd"|"homerun"|"wow"|"wpay"|"prod")
                    echo "##[section] Environment group validation passed"
                    ;;
                  *)
                    echo "##[error] Invalid environment group"
                    PROCEED=false
                    ;;
                esac
                
                case "${{ parameters.environmentType }}" in
                  "dev"|"test-env"|"test"|"uat"|"prod")
                    echo "##[section] Environment type validation passed"
                    ;;
                  *)
                    echo "##[error] Invalid environment type"
                    PROCEED=false
                    ;;
                esac
                
                if [[ "$PROCEED" == "true" ]]; then
                  echo "##[section] All validation checks passed"
                  echo "##vso[task.setvariable variable=canProceed;isOutput=true]true"
                  echo "##vso[task.setvariable variable=deploymentType;isOutput=true]$DEPLOY_TYPE"
                else
                  echo "##vso[task.setvariable variable=canProceed;isOutput=true]false"
                fi

  - stage: Build
    displayName: 'Build and Validate'
    dependsOn: Validate
    condition: eq(dependencies.Validate.outputs['ValidateInputs.validateConfig.canProceed'], 'true')
    jobs:
      - job: GCP_Auth
        displayName: 'GCP Authentication'
        steps:
          - task: Bash@3
            name: setupGcloud
            displayName: 'Setup Google Cloud SDK'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîß Setting up Google Cloud SDK"
                # Install gcloud if not present
                if ! command -v gcloud &> /dev/null; then
                  echo "Installing Google Cloud SDK..."
                  curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-438.0.0-linux-x86_64.tar.gz
                  tar -xf google-cloud-cli-438.0.0-linux-x86_64.tar.gz
                  ./google-cloud-sdk/install.sh --quiet
                  echo "##vso[task.prependpath]$PWD/google-cloud-sdk/bin"
                fi
                echo "##[section] Google Cloud SDK setup complete"

          - task: Bash@3
            name: authToGCP
            displayName: 'Authenticate to GCP'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîê Authenticating with GCP"
                
                # Set up workload identity federation
                echo '$(WORKLOAD_IDENTITY_CONFIG)' > workload_identity.json
                
                # Authenticate using workload identity
                gcloud auth login --quiet \
                  --project=$(GCP_PROJECT_ID) \
                  --cred-file=workload_identity.json
                  
                # Get access token
                TOKEN=$(gcloud auth print-access-token)
                if [ -z "$TOKEN" ]; then
                  echo "##[error] Failed to get access token"
                  exit 1
                fi
                
                # Save token securely
                echo "##vso[task.setvariable variable=ACCESS_TOKEN;isOutput=true]$TOKEN"
                echo "##[section] Authentication successful"
                
                # Cleanup
                rm -f workload_identity.json

      - job: ValidateProxy
        displayName: 'Validate API Proxy'
        dependsOn: GCP_Auth
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - task: Bash@3
            displayName: 'Run apigeelint'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîç Validating API Proxy"
                npm install -g apigeelint
                apigeelint -s ${{ parameters.proxyDirectory }} -f table.js
                if [ $? -ne 0 ]; then
                  echo "##[error] API proxy validation failed"
                  exit 1
                fi
                echo "##[section] API proxy validation passed"

  - stage: Deploy
    displayName: 'Deploy API Proxy'
    dependsOn: Build
    variables:
      ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
    jobs:
      - deployment: DeployProxy
        displayName: 'Deploy to Environment'
        environment: ${{ parameters.environmentType }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                
                - task: Bash@3
                  displayName: 'Install apigeecli'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üîß Installing Apigee CLI"
                      mkdir -p $HOME/.apigeecli/bin
                      curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
                      echo "##vso[task.prependpath]$HOME/.apigeecli/bin"
                      echo "##[section] apigeecli installed successfully"

                - task: Bash@3
                  displayName: 'Create and Upload Bundle'
                  name: uploadBundle
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üì¶ Creating and Uploading Bundle"
                      
                      # Create bundle directory
                      mkdir -p bundle
                      cp -r ${{ parameters.proxyDirectory }}/* bundle/
                      
                      # Create ZIP
                      cd bundle
                      zip -r ../proxy-bundle.zip .
                      cd ..
                      
                      # Upload to Apigee
                      ORG_NAME=$([ "${{ parameters.isProduction }}" == "true" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                      echo "Uploading to organization: $ORG_NAME"
                      
                      IMPORT_OUTPUT=$(apigeecli apis create bundle \
                        --name "${{ parameters.proxyName }}" \
                        --org "$ORG_NAME" \
                        --token "$(ACCESS_TOKEN)" \
                        --proxy-zip "proxy-bundle.zip")
                      
                      REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
                      echo "##vso[task.setvariable variable=REVISION;isOutput=true]$REVISION"
                      echo "##[section] Bundle uploaded with revision: $REVISION"

                - task: Bash@3
                  displayName: 'Deploy API Proxy'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üöÄ Deploying API Proxy"
                      
                      # Set environment name
                      ENV_NAME="${{ parameters.environmentType }}"
                      if [ "${{ parameters.environmentGroup }}" != "default" ]; then
                        ENV_NAME="${{ parameters.environmentGroup }}-${{ parameters.environmentType }}"
                      fi
                      
                      # Set organization
                      ORG_NAME=$([ "${{ parameters.isProduction }}" == "true" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                      
                      echo "Deploying to $ENV_NAME in $ORG_NAME"
                      
                      apigeecli apis deploy \
                        --name "${{ parameters.proxyName }}" \
                        --org "$ORG_NAME" \
                        --env "$ENV_NAME" \
                        --rev "$(REVISION)" \
                        --token "$(ACCESS_TOKEN)" \
                        --ovr \
                        --wait
                      
                      if [ $? -eq 0 ]; then
                        echo "##[section] Deployment successful"
                      else
                        echo "##[error] Deployment failed"
                        exit 1
                      fi

  - stage: Cleanup
    displayName: 'Cleanup'
    dependsOn: Deploy
    condition: succeeded()
    variables:
      ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
    jobs:
      - job: Cleanup
        steps:
          - task: Bash@3
            displayName: 'Cleanup Old Revisions'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üßπ Cleaning up old revisions"
                
                # Keep latest 5 revisions
                KEEP_COUNT=5
                
                # Get all revisions
                ORG_NAME=$([ "${{ parameters.isProduction }}" == "true" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                
                REVISIONS=$(apigeecli apis list revisions \
                  --name "${{ parameters.proxyName }}" \
                  --org "$ORG_NAME" \
                  --token "$(ACCESS_TOKEN)")
                
                # Convert to array and sort
                REVISION_ARRAY=($(echo $REVISIONS | tr ',' '\n' | sort -n))
                TOTAL=${#REVISION_ARRAY[@]}
                
                if [ $TOTAL -gt $KEEP_COUNT ]; then
                  for ((i=0; i<TOTAL-KEEP_COUNT; i++)); do
                    REV="${REVISION_ARRAY[$i]}"
                    echo "Deleting revision $REV..."
                    
                    apigeecli apis delete revision \
                      --name "${{ parameters.proxyName }}" \
                      --org "$ORG_NAME" \
                      --rev "$REV" \
                      --token "$(ACCESS_TOKEN)" || true
                  done
                fi
                
                echo "##[section] Cleanup complete"

          - task: PowerShell@2
            displayName: 'Generate Summary'
            inputs:
              targetType: 'inline'
              script: |
                $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                $summary = @"
                # üöÄ Apigee Deployment Summary
                
                ## üìã Deployment Information
                | Category | Details |
                |----------|---------|
                | Proxy Name | ${{ parameters.proxyName }} |
                | Environment | ${{ parameters.environmentType }} |
                | Status | ‚úÖ Success |
                | Timestamp | $timestamp |
                
                ## üîç Environment Details
                - Group: ${{ parameters.environmentGroup }}
                - Type: ${{ parameters.environmentType }}
                - Organization: $(APIGEE_ORG)
                - Build ID: $(Build.BuildId)
                
                ## üìä Deployment Results
                - ‚úÖ Validation Passed
                - ‚úÖ Bundle Created
                - ‚úÖ Deployment Successful
                - ‚úÖ Cleanup Completed
                
                _Generated at: $timestamp_
                "@
                
                $summary | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/deployment-summary.md"
                
                Write-Host "##[section] Summary generated"

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Summary'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/deployment-summary.md'
              artifactName: 'DeploymentSummary'
