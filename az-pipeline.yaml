name: Apigee Deployment Pipeline

trigger: none # Disable automatic triggers

resources:
  repositories:
    - repository: templates  
      type: git
      name: apigeex-ci-cd 

parameters:
  - name: proxyName
    type: string
    displayName: 'API Proxy Name'
    default: ''
  - name: proxyDirectory
    type: string
    displayName: 'Proxy Directory'
    default: 'apiproxy'
  - name: devEnv
    type: string
    displayName: 'Development Environment'
    default: 'test-env'
  - name: testEnv
    type: string
    displayName: 'Test Environment'
    default: 'test'
  - name: uatEnv
    type: string
    displayName: 'UAT Environment'
    default: 'uat'

variables:
  - group: apigeeX

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build and Validate'
    jobs:
      - job: GCP_Auth
        displayName: 'GCP Authentication'
        steps:
          - task: PowerShell@2
            name: authToGCP
            displayName: 'Authenticate to GCP using WIF'
            inputs:
              targetType: 'inline'
              script: |
                try {
                    Write-Host "Starting GCP Authentication..."
                    
                    # Install Google Cloud SDK
                    Write-Host "Installing Google Cloud SDK..."
                    $installScript = @"
                    sudo apt-get update && \
                    sudo apt-get install -y apt-transport-https ca-certificates gnupg curl && \
                    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
                    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
                    sudo apt-get update && sudo apt-get install -y google-cloud-cli
"@
                    
                    # Execute installation script
                    bash -c $installScript
                    if ($LASTEXITCODE -ne 0) {
                        throw "Failed to install Google Cloud SDK"
                    }
                    
                    # Create temp directory for credentials
                    $credPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath "gcp-auth"
                    Write-Host "Creating credential directory at: $credPath"
                    if (!(Test-Path -Path $credPath)) {
                        New-Item -ItemType Directory -Force -Path $credPath | Out-Null
                    }
                    
                    # Create Workload Identity configuration
                    Write-Host "Creating Workload Identity configuration..."
                    $configContent = @{
                        type = "external_account"
                        audience = "//iam.googleapis.com/$($env:WORKLOAD_IDENTITY_PROVIDER)"
                        subject_token_type = "urn:ietf:params:oauth:token-type:jwt"
                        token_url = "https://sts.googleapis.com/v1/token"
                        credential_source = @{
                            file = Join-Path -Path $credPath -ChildPath "azure-token.txt"
                        }
                        service_account_impersonation_url = "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$($env:SERVICE_ACCOUNT):generateAccessToken"
                    }
                    
                    # Save Azure token
                    Write-Host "Saving Azure token..."
                    $tokenPath = Join-Path -Path $credPath -ChildPath "azure-token.txt"
                    $env:AZURE_TOKEN | Out-File -FilePath $tokenPath -Force
                    
                    # Save configuration
                    Write-Host "Saving credential configuration..."
                    $configPath = Join-Path -Path $credPath -ChildPath "config.json"
                    $configContent | ConvertTo-Json -Depth 10 | Out-File -FilePath $configPath -Force
                    
                    # Set GOOGLE_APPLICATION_CREDENTIALS
                    $env:GOOGLE_APPLICATION_CREDENTIALS = $configPath
                    Write-Host "Using config file: $configPath"
                    
                    # Authenticate
                    Write-Host "Authenticating with GCP..."
                    gcloud auth login --cred-file="$configPath" --quiet
                    
                    if ($LASTEXITCODE -ne 0) {
                        throw "Failed to authenticate with GCP"
                    }
                    
                    # Get and store access token
                    Write-Host "Getting access token..."
                    $accessToken = gcloud auth print-access-token
                    if ([string]::IsNullOrEmpty($accessToken)) {
                        throw "Failed to get access token"
                    }
                    
                    Write-Host "Setting access token as pipeline variable..."
                    Write-Host "##vso[task.setvariable variable=ACCESS_TOKEN;isOutput=true]$accessToken"
                    Write-Host "Authentication successful"
                }
                catch {
                    Write-Error "Authentication failed: $_"
                    Write-Host "##[error]Error details: $($_.Exception.Message)"
                    Write-Host "##[error]Stack trace: $($_.ScriptStackTrace)"
                    exit 1
                }
                finally {
                    if ($credPath -and (Test-Path -Path $credPath)) {
                        Remove-Item -Path $credPath -Recurse -Force
                    }
                }
            env:
              AZURE_TOKEN: $(System.AccessToken)
              WORKLOAD_IDENTITY_PROVIDER: $(WORKLOAD_IDENTITY_PROVIDER)
              SERVICE_ACCOUNT: $(SERVICE_ACCOUNT)

          - task: Bash@3
            displayName: 'Verify Authentication'
            inputs:
              targetType: 'inline'
              script: |
                set -e
                echo "Verifying authentication..."
                gcloud auth list
                echo "Verification complete"

      - job: ApigeeLint
        displayName: 'Lint Apigee Proxy'
        dependsOn: GCP_Auth
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - task: Bash@3
            displayName: 'Run Apigee Lint'
            inputs:
              targetType: 'inline'
              script: |
                npm install -g apigeelint
                apigeelint -s ${{ parameters.proxyDirectory }} -f table.js

  - stage: Prepare
    displayName: 'Prepare Bundle'
    dependsOn: Build
    jobs:
      - job: PrepareAndUpload
        displayName: 'Prepare and Upload Bundle'
        variables:
          ACCESS_TOKEN: $[ dependencies.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
        steps:
          - task: Bash@3
            displayName: 'Install apigeecli'
            inputs:
              targetType: 'inline'
              script: |
                curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
                echo "##vso[task.prependpath]$HOME/.apigeecli/bin"

          - task: ArchiveFiles@2
            displayName: 'Create API Bundle'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/${{ parameters.proxyDirectory }}'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/proxy.zip'

          - task: Bash@3
            name: uploadBundle
            displayName: 'Upload and Get Revision'
            inputs:
              targetType: 'inline'
              script: |
                IMPORT_OUTPUT=$(apigeecli apis create bundle \
                  -n "${{ parameters.proxyName }}" \
                  -p "$(Build.ArtifactStagingDirectory)/proxy.zip" \
                  --org "$(APIGEE_ORG)" \
                  --token "$(ACCESS_TOKEN)")
                
                LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision": "\K[^"]+')
                echo "##vso[task.setvariable variable=LATEST_REVISION;isOutput=true]$LATEST_REVISION"

  - stage: Deploy 
    displayName: 'Deploy to Environments'
    dependsOn: Prepare
    jobs:
      - deployment: DeployToDev
        displayName: 'Deploy to Dev'
        environment: development
        variables:
          ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
          LATEST_REVISION: $[ stageDependencies.Prepare.PrepareAndUpload.outputs['uploadBundle.LATEST_REVISION'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-steps.yml@templates
                  parameters:
                    environmentName: ${{ parameters.devEnv }}

      - deployment: DeployToTest
        displayName: 'Deploy to Test'
        dependsOn: DeployToDev
        environment: test
        variables:
          ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
          LATEST_REVISION: $[ stageDependencies.Prepare.PrepareAndUpload.outputs['uploadBundle.LATEST_REVISION'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-steps.yml@templates
                  parameters:
                    environmentName: ${{ parameters.testEnv }}

      - deployment: DeployToUat
        displayName: 'Deploy to UAT'
        dependsOn: DeployToTest
        environment: uat
        variables:
          ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
          LATEST_REVISION: $[ stageDependencies.Prepare.PrepareAndUpload.outputs['uploadBundle.LATEST_REVISION'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-steps.yml@templates
                  parameters:
                    environmentName: ${{ parameters.uatEnv }}


  - stage: Cleanup
    displayName: 'Cleanup and Summary'
    dependsOn: Deploy
    jobs:
      - job: CleanupRevisions
        displayName: 'Cleanup Old Revisions'
        variables:
          ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['authToGCP.ACCESS_TOKEN'] ]
        steps:
          - task: Bash@3
            name: cleanup
            displayName: 'Delete Older Revisions'
            inputs:
              targetType: 'inline'
              script: |
                # Your existing cleanup script here

      - job: DeploymentSummary
        displayName: 'Generate Deployment Summary'
        dependsOn: CleanupRevisions
        variables:
          LATEST_REVISION: $[ stageDependencies.Prepare.PrepareAndUpload.outputs['uploadBundle.LATEST_REVISION'] ]
          KEPT_COUNT: $[ dependencies.CleanupRevisions.outputs['cleanup.KEPT_COUNT'] ]
          DELETED_COUNT: $[ dependencies.CleanupRevisions.outputs['cleanup.DELETED_COUNT'] ]
          FAILED_COUNT: $[ dependencies.CleanupRevisions.outputs['cleanup.FAILED_COUNT'] ]
        steps:
          - task: PowerShell@2
            displayName: 'Generate Summary'
            inputs:
              targetType: 'inline'
              script: |
                # Your existing summary generation script here

          - task: PublishBuildArtifacts@1
            condition: always()
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/deployment-summary.md'
              artifactName: 'DeploymentSummary'