name: Apigee Deployment Pipeline

trigger: none

parameters:
  - name: proxyName
    type: string
    displayName: 'API Proxy Name'
    default: ''
  - name: proxyDirectory
    type: string
    displayName: 'Proxy Directory'
    default: 'apiproxy'
  - name: environmentGroup
    type: string
    displayName: 'Environment Group'
    default: 'default'
    values:
      - 'default'
      - 'edd'
      - 'homerun'
      - 'wow'
      - 'wpay'
  - name: environmentType
    type: string
    displayName: 'Environment Type'
    default: 'test-env'
    values:
      - 'dev'
      - 'test-env'
      - 'test'
      - 'uat'
      - 'prod'
  - name: isProduction
    type: boolean
    displayName: 'Is Production Deployment?'
    default: false

variables:
  - group: apigeeX # Contains APIGEE_ORG, APIGEE_ORG_PROD, and GCP_WIF_CONFIG
  - name: versionId
    value: '$(Build.BuildId)-$(Build.SourceVersion)'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build and Validate'
    jobs:
      - job: Auth
        displayName: 'GCP Authentication'
        steps:
          - task: Bash@3
            name: installGCloud
            displayName: 'Install Google Cloud SDK'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîß Installing Google Cloud SDK"
                sudo apt-get install apt-transport-https ca-certificates gnupg
                echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                sudo apt-get update && sudo apt-get install google-cloud-sdk
                echo "##[section] Google Cloud SDK installed"

          - task: Bash@3
            name: getAccessToken
            displayName: 'Get Access Token'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîê Authenticating with GCP"
                
                # Write WIF configuration
                echo "$(GCP_WIF_CONFIG)" > wif-config.json
                
                # Authenticate using WIF
                gcloud auth login --cred-file=wif-config.json
                
                # Get access token
                TOKEN=$(gcloud auth print-access-token)
                if [ -z "$TOKEN" ]; then
                  echo "##[error] Failed to get access token"
                  exit 1
                fi
                
                # Save token and clean up
                echo "##vso[task.setvariable variable=ACCESS_TOKEN;isOutput=true;issecret=true]$TOKEN"
                rm wif-config.json
                
                echo "##[section] Authentication successful"

      - job: ValidateProxy
        displayName: 'Validate API Proxy'
        dependsOn: Auth
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - task: Bash@3
            displayName: 'Run apigeelint'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîç Validating API Proxy"
                npm install -g apigeelint
                apigeelint -s ${{ parameters.proxyDirectory }} -f table.js
                if [ $? -ne 0 ]; then
                  echo "##[error] API proxy validation failed"
                  exit 1
                fi
                echo "##[section] API proxy validation passed"

  - stage: Deploy
    displayName: 'Deploy API Proxy'
    dependsOn: Build
    variables:
      ACCESS_TOKEN: $[ stageDependencies.Build.Auth.outputs['getAccessToken.ACCESS_TOKEN'] ]
    jobs:
      - deployment: DeployProxy
        displayName: 'Deploy to Environment'
        environment: nonprod # Simplified environment name
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                
                - task: Bash@3
                  displayName: 'Install apigeecli'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üîß Installing Apigee CLI"
                      mkdir -p $HOME/.apigeecli/bin
                      curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
                      echo "##vso[task.prependpath]$HOME/.apigeecli/bin"
                      echo "##[section] apigeecli installed successfully"

                - task: Bash@3
                  displayName: 'Create and Upload Bundle'
                  name: uploadBundle
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üì¶ Creating and Uploading Bundle"
                      
                      # Create bundle directory
                      mkdir -p bundle
                      cp -r ${{ parameters.proxyDirectory }}/* bundle/
                      
                      # Create ZIP
                      cd bundle
                      zip -r ../proxy-bundle.zip .
                      cd ..
                      
                      # Upload to Apigee
                      ORG_NAME=$([ "${{ parameters.isProduction }}" == "true" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                      echo "Uploading to organization: $ORG_NAME"
                      
                      IMPORT_OUTPUT=$(apigeecli apis create bundle \
                        --name "${{ parameters.proxyName }}" \
                        --org "$ORG_NAME" \
                        --token "$(ACCESS_TOKEN)" \
                        --proxy-zip "proxy-bundle.zip")
                      
                      REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
                      if [ -z "$REVISION" ]; then
                        echo "##[error] Failed to get revision number"
                        exit 1
                      fi
                      echo "##vso[task.setvariable variable=REVISION;isOutput=true]$REVISION"
                      echo "##[section] Bundle uploaded with revision: $REVISION"

                - task: Bash@3
                  displayName: 'Deploy API Proxy'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üöÄ Deploying API Proxy"
                      
                      # Set environment name
                      ENV_NAME="${{ parameters.environmentType }}"
                      if [ "${{ parameters.environmentGroup }}" != "default" ]; then
                        ENV_NAME="${{ parameters.environmentGroup }}-${{ parameters.environmentType }}"
                      fi
                      
                      # Set organization
                      ORG_NAME=$([ "${{ parameters.isProduction }}" == "true" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                      
                      echo "Deploying to $ENV_NAME in $ORG_NAME"
                      
                      apigeecli apis deploy \
                        --name "${{ parameters.proxyName }}" \
                        --org "$ORG_NAME" \
                        --env "$ENV_NAME" \
                        --rev "$(REVISION)" \
                        --token "$(ACCESS_TOKEN)" \
                        --ovr \
                        --wait
                      
                      if [ $? -eq 0 ]; then
                        echo "##[section] Deployment successful"
                      else
                        echo "##[error] Deployment failed"
                        exit 1
                      fi
