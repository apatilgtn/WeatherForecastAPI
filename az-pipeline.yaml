name: Apigee Proxy Deployment

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - 'src/**'
      - 'apiproxy/**'

variables:
  - group: apigeex

pool:
  vmImage: 'windows-2019'

jobs:
  - job: DeployApigeeProxy
    displayName: 'Deploy Apigee Proxy'
    steps:
      - task: PowerShell@2
        displayName: 'Install Google Cloud SDK'
        inputs:
          targetType: 'inline'
          script: |
            (New-Object Net.WebClient).DownloadFile("https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe", "$env:Temp\GoogleCloudSDKInstaller.exe")
            & $env:Temp\GoogleCloudSDKInstaller.exe /S /allusers /noreporting /nodesktop /noconsole
            
      - task: PowerShell@2
        name: authToGCP
        displayName: 'Authenticate to Google Cloud'
        inputs:
          targetType: 'inline'
          script: |
            # Create service account key file
            $env:SERVICE_ACCOUNT | Out-File gcp-credentials.json
            
            # Authenticate using service account
            gcloud auth activate-service-account --key-file=gcp-credentials.json
            
            # Set project
            gcloud config set project $env:APIGEE_ORG
            
            # Get access token
            $ACCESS_TOKEN = gcloud auth print-access-token
            Write-Host "##vso[task.setvariable variable=ACCESS_TOKEN]$ACCESS_TOKEN"

      - task: PowerShell@2
        displayName: 'Install apigeecli'
        inputs:
          targetType: 'inline'
          script: |
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh" -OutFile "downloadLatest.sh"
            bash downloadLatest.sh
            $env:PATH += ";$env:USERPROFILE\.apigeecli\bin"

      - task: ArchiveFiles@2
        displayName: 'Create API Bundle'
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/apiproxy'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/proxy.zip'

      - task: PowerShell@2
        displayName: 'Deploy to Dev'
        inputs:
          targetType: 'inline'
          script: |
            apigeecli apis create bundle `
              -n "$(ProxyName)" `
              -p "$(Build.ArtifactStagingDirectory)/proxy.zip" `
              --org "$env:APIGEE_ORG" `
              --token "$(ACCESS_TOKEN)" `
              --env "dev" `
              --ovr `
              --wait

      - task: PowerShell@2
        displayName: 'Deploy to Test'
        condition: succeeded()
        inputs:
          targetType: 'inline'
          script: |
            apigeecli apis deploy `
              --name "$(ProxyName)" `
              --org "$env:APIGEE_ORG" `
              --env "test" `
              --token "$(ACCESS_TOKEN)" `
              --ovr `
              --wait

      - task: PowerShell@2
        displayName: 'Deploy to UAT'
        condition: succeeded()
        inputs:
          targetType: 'inline'
          script: |
            apigeecli apis deploy `
              --name "$(ProxyName)" `
              --org "$env:APIGEE_ORG" `
              --env "uat" `
              --token "$(ACCESS_TOKEN)" `
              --ovr `
              --wait

      - task: PowerShell@2
        displayName: 'Generate Summary'
        condition: always()
        inputs:
          targetType: 'inline'
          script: |
            @"
            # Apigee Proxy Deployment Summary

            ## Deployment Details
            | Parameter | Value |
            |-----------|--------|
            | Proxy Name | $(ProxyName) |
            | Status | $(if ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '❌ Failed' }) |
            "@ | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/deployment-summary.md"

      - task: PublishBuildArtifacts@1
        condition: always()
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/deployment-summary.md'
          artifactName: 'DeploymentSummary'