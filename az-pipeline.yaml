trigger: none # Disable automatic triggers - use pipeline parameters instead

parameters:
  - name: proxyName
    type: string
    displayName: 'API Proxy Name'
    default: ''
  - name: proxyDirectory
    type: string
    displayName: 'Proxy Directory'
    default: 'apiproxy'
  - name: deployToDev
    type: boolean
    displayName: 'Deploy to Dev Environment'
    default: true
  - name: deployToTest
    type: boolean
    displayName: 'Deploy to Test Environment'
    default: true
  - name: deployToUat
    type: boolean
    displayName: 'Deploy to UAT Environment'
    default: true

variables:
  - group: apigeeX # Variable group containing secrets
  - name: GCLOUD_VERSION
    value: '446.0.0' # Specify Google Cloud SDK version for consistency

pool:
  vmImage: 'windows-2019'

jobs:
  - job: ApigeeDeployment
    displayName: 'Apigee Deployment Process'
    steps:
      # Validate Parameters
      - task: PowerShell@2
        displayName: 'Validate Parameters'
        inputs:
          targetType: 'inline'
          script: |
            if ([string]::IsNullOrEmpty("${{ parameters.proxyName }}")) {
                Write-Error "Proxy name is required"
                exit 1
            }
            if (-not (Test-Path "${{ parameters.proxyDirectory }}")) {
                Write-Error "Proxy directory '${{ parameters.proxyDirectory }}' not found"
                exit 1
            }

      # Install Google Cloud SDK with version control
      - task: PowerShell@2
        displayName: 'Install Google Cloud SDK'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Installing Google Cloud SDK version $(GCLOUD_VERSION)"
            
            # Download specific version
            $installerUrl = "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$(GCLOUD_VERSION)-windows-x86_64-bundled-python.zip"
            $installerPath = "$env:TEMP\google-cloud-sdk.zip"
            
            Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
            Expand-Archive -Path $installerPath -DestinationPath "$env:ProgramFiles"
            
            # Add to PATH
            $env:PATH = "$env:ProgramFiles\google-cloud-sdk\bin;$env:PATH"
            
            # Verify installation
            $gcloudVersion = gcloud version
            Write-Host "Installed Google Cloud SDK version:"
            Write-Host $gcloudVersion
            
            # Configure SDK settings
            gcloud config set disable_usage_reporting true
            gcloud config set component_manager/disable_update_check true

      # Authenticate to GCP
- task: PowerShell@2
  name: authToGCP
  displayName: 'Authenticate to GCP'
  inputs:
    targetType: 'inline'
    script: |
      try {
          # Check if credentials exist
          if ([string]::IsNullOrEmpty($env:GOOGLE_CREDENTIALS)) {
              Write-Error "GOOGLE_CREDENTIALS environment variable is not set. Please make sure it's configured in the variable group."
              exit 1
          }

          # Create credentials file
          $credentialsPath = Join-Path $env:SYSTEM_DEFAULTWORKINGDIRECTORY "gcp-credentials.json"
          $env:GOOGLE_CREDENTIALS | Out-File -FilePath $credentialsPath -Encoding UTF8
          
          Write-Host "Authenticating to GCP..."
          
          # Verify the credentials file exists and has content
          if (-not (Test-Path $credentialsPath) -or (Get-Item $credentialsPath).Length -eq 0) {
              Write-Error "Credentials file was not created properly"
              exit 1
          }
          
          # Authenticate using the service account
          gcloud auth activate-service-account --key-file=$credentialsPath
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to authenticate with GCP"
              exit 1
          }
          
          # Get and store access token
          $ACCESS_TOKEN = gcloud auth print-access-token
          Write-Host "##vso[task.setvariable variable=ACCESS_TOKEN]$ACCESS_TOKEN"
          
          # Verify authentication
          Write-Host "Verifying authentication..."
          gcloud auth list
          
          # Clean up credentials file
          Remove-Item $credentialsPath -Force
      }
      catch {
          Write-Error "Authentication failed: $_"
          exit 1
      }

      # Install Node.js and Apigee Lint
      - task: NodeTool@0
        inputs:
          versionSpec: '20.x'
        displayName: 'Install Node.js'

      # Run Quality Checks with detailed reporting
      - task: PowerShell@2
        displayName: 'Run Apigee Lint'
        inputs:
          targetType: 'inline'
          script: |
            npm install -g apigeelint
            
            $lintOutput = apigeelint -s ${{ parameters.proxyDirectory }} -f json.js
            $lintResults = $lintOutput | ConvertFrom-Json
            
            $errorCount = ($lintResults | Where-Object { $_.severity -eq 'error' }).Count
            $warningCount = ($lintResults | Where-Object { $_.severity -eq 'warn' }).Count
            
            Write-Host "Found $errorCount errors and $warningCount warnings"
            
            if ($errorCount -gt 0) {
                Write-Error "Linting failed with $errorCount errors"
                exit 1
            }

      # Install apigeecli with version check
      - task: PowerShell@2
        displayName: 'Install apigeecli'
        inputs:
          targetType: 'inline'
          script: |
            # Download and install apigeecli
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh" -OutFile "downloadLatest.sh"
            bash downloadLatest.sh
            $env:PATH += ";$env:USERPROFILE\.apigeecli\bin"
            
            # Verify installation
            apigeecli version

      # Create API Bundle with validation
      - task: ArchiveFiles@2
        displayName: 'Create API Bundle'
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/${{ parameters.proxyDirectory }}'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/proxy.zip'

      # Upload and Deploy Bundle with enhanced error handling
      - task: PowerShell@2
        name: uploadAndDeploy
        displayName: 'Upload and Deploy Bundle'
        inputs:
          targetType: 'inline'
          script: |
            function Deploy-ToEnvironment {
                param (
                    [string]$Environment,
                    [string]$Revision,
                    [bool]$Deploy
                )
                
                if (-not $Deploy) {
                    Write-Host "Skipping deployment to $Environment as per configuration"
                    return $true
                }
                
                Write-Host "Deploying to $Environment environment..."
                
                try {
                    apigeecli apis deploy `
                        --name "${{ parameters.proxyName }}" `
                        --org "$(APIGEE_ORG)" `
                        --env "$Environment" `
                        --rev "$Revision" `
                        --token "$(ACCESS_TOKEN)" `
                        --ovr `
                        --wait
                    
                    Write-Host "Successfully deployed to $Environment"
                    return $true
                }
                catch {
                    Write-Error "Failed to deploy to $Environment: $_"
                    return $false
                }
            }
            
            # Upload bundle
            try {
                $IMPORT_OUTPUT = apigeecli apis create bundle `
                    -n "${{ parameters.proxyName }}" `
                    -p "$(Build.ArtifactStagingDirectory)/proxy.zip" `
                    --org "$(APIGEE_ORG)" `
                    --token "$(ACCESS_TOKEN)"
                
                $LATEST_REVISION = ($IMPORT_OUTPUT | Select-String -Pattern '"revision": "(\d+)"').Matches.Groups[1].Value
                
                if (-not $LATEST_REVISION) {
                    throw "Failed to get revision number"
                }
                
                Write-Host "##vso[task.setvariable variable=LATEST_REVISION]$LATEST_REVISION"
                
                # Deploy to environments based on parameters
                $devSuccess = Deploy-ToEnvironment -Environment "dev" -Revision $LATEST_REVISION -Deploy ${{ parameters.deployToDev }}
                $testSuccess = Deploy-ToEnvironment -Environment "test" -Revision $LATEST_REVISION -Deploy ${{ parameters.deployToTest }}
                $uatSuccess = Deploy-ToEnvironment -Environment "uat" -Revision $LATEST_REVISION -Deploy ${{ parameters.deployToUat }}
                
                if ((${{ parameters.deployToDev }} -and -not $devSuccess) -or 
                    (${{ parameters.deployToTest }} -and -not $testSuccess) -or 
                    (${{ parameters.deployToUat }} -and -not $uatSuccess)) {
                    throw "One or more deployments failed"
                }
            }
            catch {
                Write-Error $_
                exit 1
            }

      # Enhanced Summary Generation
      - task: PowerShell@2
        displayName: 'Generate Summary'
        condition: always()
        inputs:
          targetType: 'inline'
          script: |
            $deploymentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            
            $summary = @"
            # Apigee Proxy Deployment Summary
            
            ## Deployment Information
            - **Deployment Time**: $deploymentTime
            - **Proxy Name**: ${{ parameters.proxyName }}
            - **New Revision**: $(LATEST_REVISION)
            - **Pipeline Status**: $(if ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Successful' } else { '⛔ Failed' })
            
            ## Environment Deployments
            | Environment | Status | Enabled |
            |------------|---------|---------|
            | Dev | $(if (-not ${{ parameters.deployToDev }}) { '⏭️ Skipped' } elseif ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '⛔ Failed' }) | ${{ parameters.deployToDev }} |
            | Test | $(if (-not ${{ parameters.deployToTest }}) { '⏭️ Skipped' } elseif ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '⛔ Failed' }) | ${{ parameters.deployToTest }} |
            | UAT | $(if (-not ${{ parameters.deployToUat }}) { '⏭️ Skipped' } elseif ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '⛔ Failed' }) | ${{ parameters.deployToUat }} |
            
            ## Additional Information
            - **Build Number**: $(Build.BuildNumber)
            - **Trigger**: $(Build.Reason)
            - **Repository**: $(Build.Repository.Name)
            "@
            
            $summary | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/deployment-summary.md"

      # Publish Summary
      - task: PublishBuildArtifacts@1
        condition: always()
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/deployment-summary.md'
          artifactName: 'DeploymentSummary'
