name: Apigee Proxy Deployment

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - 'src/**'
      - 'apiproxy/**'

parameters:
  - name: proxyName
    type: string
    default: 'WeatherForecastAPI'
    displayName: 'API Proxy Name'
  - name: devEnv
    type: string
    default: 'dev'
    displayName: 'Development Environment'
  - name: testEnv
    type: string
    default: 'test'
    displayName: 'Test Environment'
  - name: uatEnv
    type: string
    default: 'uat'
    displayName: 'UAT Environment'

variables:
  - group: apigeex

pool:
  vmImage: 'windows-latest'  # Changed to windows-latest for free tier

stages:
  - stage: Setup
    displayName: 'Setup and Authentication'
    jobs:
      - job: SetupAndAuth
        steps:
          - task: PowerShell@2
            displayName: 'Install Google Cloud SDK'
            inputs:
              targetType: 'inline'
              script: |
                (New-Object Net.WebClient).DownloadFile("https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe", "$env:Temp\GoogleCloudSDKInstaller.exe")
                & $env:Temp\GoogleCloudSDKInstaller.exe /S /allusers /noreporting /nodesktop /noconsole
                
          - task: PowerShell@2
            name: authToGCP
            displayName: 'Authenticate to Google Cloud'
            inputs:
              targetType: 'inline'
              script: |
                # Create service account key file
                $env:SERVICE_ACCOUNT | Out-File gcp-credentials.json
                
                # Authenticate using service account
                gcloud auth activate-service-account --key-file=gcp-credentials.json
                
                # Set project
                gcloud config set project $env:APIGEE_ORG
                
                # Get access token for later use
                $ACCESS_TOKEN = gcloud auth print-access-token
                Write-Host "##vso[task.setvariable variable=ACCESS_TOKEN;isOutput=true]$ACCESS_TOKEN"

  - stage: DeployProxy
    displayName: 'Deploy Apigee Proxy'
    dependsOn: Setup
    variables:
      ACCESS_TOKEN: $[ stageDependencies.Setup.SetupAndAuth.outputs['authToGCP.ACCESS_TOKEN'] ]
    jobs:
      - job: DeployToEnvironments
        steps:
          - task: PowerShell@2
            displayName: 'Install apigeecli'
            inputs:
              targetType: 'inline'
              script: |
                Invoke-WebRequest -Uri "https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh" -OutFile "downloadLatest.sh"
                bash downloadLatest.sh
                $env:PATH += ";$env:USERPROFILE\.apigeecli\bin"

          - task: ArchiveFiles@2
            displayName: 'Create API Bundle'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/apiproxy'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/proxy.zip'

          - task: PowerShell@2
            name: deployToDev
            displayName: 'Deploy to Dev'
            inputs:
              targetType: 'inline'
              script: |
                apigeecli apis create bundle `
                  -n "${{ parameters.proxyName }}" `
                  -p "$(Build.ArtifactStagingDirectory)/proxy.zip" `
                  --org "$env:APIGEE_ORG" `
                  --token "$(ACCESS_TOKEN)" `
                  --env "${{ parameters.devEnv }}" `
                  --ovr `
                  --wait

          - task: PowerShell@2
            name: deployToTest
            displayName: 'Deploy to Test'
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                apigeecli apis deploy `
                  --name "${{ parameters.proxyName }}" `
                  --org "$env:APIGEE_ORG" `
                  --env "${{ parameters.testEnv }}" `
                  --token "$(ACCESS_TOKEN)" `
                  --ovr `
                  --wait

          - task: PowerShell@2
            name: deployToUAT
            displayName: 'Deploy to UAT'
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                apigeecli apis deploy `
                  --name "${{ parameters.proxyName }}" `
                  --org "$env:APIGEE_ORG" `
                  --env "${{ parameters.uatEnv }}" `
                  --token "$(ACCESS_TOKEN)" `
                  --ovr `
                  --wait

  - stage: Summary
    displayName: 'Deployment Summary'
    dependsOn: DeployProxy
    condition: always()
    jobs:
      - job: GenerateSummary
        steps:
          - task: PowerShell@2
            displayName: 'Generate Summary'
            inputs:
              targetType: 'inline'
              script: |
                @"
                # Apigee Proxy Deployment Summary

                ## Deployment Details
                | Parameter | Value |
                |-----------|--------|
                | Proxy Name | ${{ parameters.proxyName }} |
                | Dev Environment | ${{ parameters.devEnv }} |
                | Test Environment | ${{ parameters.testEnv }} |
                | UAT Environment | ${{ parameters.uatEnv }} |

                ## Deployment Status
                | Environment | Status |
                |-------------|--------|
                | Dev | $(if ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '❌ Failed' }) |
                | Test | $(if ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '❌ Failed' }) |
                | UAT | $(if ($env:AGENT_JOBSTATUS -eq 'Succeeded') { '✅ Success' } else { '❌ Failed' }) |
                "@ | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/deployment-summary.md"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/deployment-summary.md'
              artifactName: 'DeploymentSummary'