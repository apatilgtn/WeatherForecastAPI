name: Apigee Deployment Pipeline

trigger: none  # Disable automatic triggers

resources:
  repositories:
    - repository: templates  
      type: git
      name: apigeex-ci-cd 

parameters:
  - name: proxyName
    type: string
    displayName: 'API Proxy Name'
    default: ''
  - name: proxyDirectory
    type: string
    displayName: 'Proxy Directory'
    default: 'apiproxy'
  - name: environmentGroup
    type: string
    displayName: 'Environment Group'
    default: 'default'
    values:
      - 'default'
      - 'edd'
      - 'homerun'
      - 'wow'
      - 'wpay'
  - name: environmentType
    type: string
    displayName: 'Environment Type'
    default: 'test-env'
    values:
      - 'dev'
      - 'test-env'
      - 'test'
      - 'uat'
      - 'prod'
  - name: isProduction
    type: boolean
    displayName: 'Is Production Deployment?'
    default: false

variables:
  - group: apigeeX  # Contains APIGEE_ORG, APIGEE_ORG_PROD
  - name: versionId
    value: '$(Build.BuildId)-$(Build.SourceVersion)'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Validate
    displayName: 'Validate Inputs'
    jobs:
      - job: ValidateInputs
        steps:
          - task: Bash@3
            name: validateConfig
            displayName: 'Validate Configuration'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîç Validating Configuration"
                
                PROCEED=true
                DEPLOY_TYPE="non-prod"
                STATUS="pending"
                
                if [[ "${{ parameters.isProduction }}" == "true" ]]; then
                  DEPLOY_TYPE="prod"
                fi
                
                case "${{ parameters.environmentGroup }}" in
                  "default"|"edd"|"homerun"|"wow"|"wpay"|"prod")
                    echo "##[section] Environment group validation passed"
                    ;;
                  *)
                    echo "##[error] Invalid environment group"
                    PROCEED=false
                    ;;
                esac
                
                case "${{ parameters.environmentType }}" in
                  "dev"|"test-env"|"test"|"uat"|"prod")
                    echo "##[section] Environment type validation passed"
                    ;;
                  *)
                    echo "##[error] Invalid environment type"
                    PROCEED=false
                    ;;
                esac
                
                if [[ "$PROCEED" == "true" ]]; then
                  echo "##[section] All validation checks passed"
                  echo "##vso[task.setvariable variable=canProceed;isOutput=true]true"
                  echo "##vso[task.setvariable variable=deploymentType;isOutput=true]$DEPLOY_TYPE"
                else
                  echo "##vso[task.setvariable variable=canProceed;isOutput=true]false"
                fi

  - stage: Build
    displayName: 'Build and Validate'
    dependsOn: Validate
    condition: eq(dependencies.Validate.outputs['ValidateInputs.validateConfig.canProceed'], 'true')
    jobs:
      - job: GCP_Auth
        displayName: 'GCP Authentication'
        steps:
          - task: GoogleCloudSDK@0
            name: authToGCP
            displayName: 'Authenticate to GCP using Workload Identity'
            inputs:
              serviceConnection: 'GCP-WIF'  # Your Workload Identity Federation service connection
              commands: 'auth print-access-token'

          - task: Bash@3
            name: getAccessToken
            displayName: 'Get and Store Access Token'
            inputs:
              targetType: 'inline'
              script: |
                TOKEN=$(gcloud auth print-access-token)
                if [ -z "$TOKEN" ]; then
                  echo "##[error] Failed to get access token"
                  exit 1
                fi
                echo "##vso[task.setvariable variable=ACCESS_TOKEN;isOutput=true]$TOKEN"
                echo "##[section] Access token retrieved successfully"

      - job: ApigeeLint
        displayName: 'Lint Apigee Proxy'
        dependsOn: GCP_Auth
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - task: Bash@3
            displayName: 'Run Apigee Lint'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîç Running Apigee Lint"
                npm install -g apigeelint
                apigeelint -s ${{ parameters.proxyDirectory }} -f table.js
                if [ $? -ne 0 ]; then
                  echo "##[error] Apigee lint failed"
                  exit 1
                fi
                echo "##[section] Lint checks passed"

  - stage: PrepareAndDeploy
    displayName: 'Prepare and Deploy'
    dependsOn: 
      - Validate
      - Build
    condition: and(succeeded(), eq(dependencies.Validate.outputs['ValidateInputs.validateConfig.canProceed'], 'true'))
    variables:
      ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['getAccessToken.ACCESS_TOKEN'] ]
      deploymentType: $[ stageDependencies.Validate.outputs['ValidateInputs.validateConfig.deploymentType'] ]
    jobs:
      - job: PrepareBundle
        steps:
          - task: Bash@3
            displayName: 'Install apigeecli'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üîß Installing Apigee CLI"
                mkdir -p $HOME/.apigeecli/bin
                curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
                echo "##vso[task.prependpath]$HOME/.apigeecli/bin"
                echo "##[section] apigeecli installed successfully"

          - task: ArchiveFiles@2
            displayName: 'Create API Bundle'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/${{ parameters.proxyDirectory }}'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/proxy-$(versionId).zip'
              replaceExistingArchive: true

          - task: Bash@3
            name: uploadBundle
            displayName: 'Upload Bundle'
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]üì§ Uploading Bundle"
                ORG_NAME=$([ "$(deploymentType)" == "prod" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                
                IMPORT_OUTPUT=$(apigeecli apis create bundle \
                  -n "${{ parameters.proxyName }}" \
                  -p "$(Build.ArtifactStagingDirectory)/proxy-$(versionId).zip" \
                  --org "$ORG_NAME" \
                  --token "$(ACCESS_TOKEN)")
                
                REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
                echo "##vso[task.setvariable variable=REVISION;isOutput=true]$REVISION"
                echo "##[section] Bundle uploaded successfully with revision $REVISION"

      - deployment: DeployProxy
        displayName: 'Deploy Proxy'
        dependsOn: PrepareBundle
        environment: ${{ parameters.environmentType }}
        variables:
          REVISION: $[ dependencies.PrepareBundle.outputs['uploadBundle.REVISION'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Deploy to Environment'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "##[group]üöÄ Deploying Proxy"
                      
                      # Determine organization and environment
                      ORG_NAME=$([ "$(deploymentType)" == "prod" ] && echo "$(APIGEE_ORG_PROD)" || echo "$(APIGEE_ORG)")
                      ENV_NAME="${{ parameters.environmentGroup }}-${{ parameters.environmentType }}"
                      if [[ "${{ parameters.environmentGroup }}" == "default" ]]; then
                        ENV_NAME="${{ parameters.environmentType }}"
                      fi
                      
                      echo "Deploying to $ENV_NAME in $ORG_NAME"
                      
                      apigeecli apis deploy \
                        --name "${{ parameters.proxyName }}" \
                        --org "$ORG_NAME" \
                        --env "$ENV_NAME" \
                        --rev "$(REVISION)" \
                        --token "$(ACCESS_TOKEN)" \
                        --ovr \
                        --wait
                      
                      if [ $? -eq 0 ]; then
                        echo "##[section] Deployment successful"
                      else
                        echo "##[error] Deployment failed"
                        exit 1
                      fi

  - stage: Cleanup
    displayName: 'Cleanup and Summary'
    dependsOn: PrepareAndDeploy
    condition: succeeded()
    variables:
      ACCESS_TOKEN: $[ stageDependencies.Build.GCP_Auth.outputs['getAccessToken.ACCESS_TOKEN'] ]
    jobs:
      - job: CleanupRevisions
        steps:
          - template: templates/cleanup-steps.yml@templates
            parameters:
              proxyName: ${{ parameters.proxyName }}
              keepCount: 5

      - job: GenerateSummary
        dependsOn: CleanupRevisions
        steps:
          - template: templates/summary-steps.yml@templates
            parameters:
              proxyName: ${{ parameters.proxyName }}
              environmentType: ${{ parameters.environmentType }}
              environmentGroup: ${{ parameters.environmentGroup }}
              version: $(versionId)
